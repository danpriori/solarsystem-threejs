/*! For license information please see main.bundle.js.LICENSE.txt */
(self.webpackChunkthreejs_sun_earth_moon_solarsystem=self.webpackChunkthreejs_sun_earth_moon_solarsystem||[]).push([["main"],{"./src/js/app.js":(e,t,n)=>{"use strict";n.r(t);var a=n("./src/js/data/settings.js"),s=n("./src/js/utils/detector.js"),r=n("./src/js/app/main.js");n("./src/css/app.scss");console.log("----- RUNNING IN DEV ENVIRONMENT! -----"),a.default.isDev=!0,function(){if(s.default.webgl){var e=document.getElementById("appContainer");new r.default(e)}else s.default.addGetWebGLMessage()}()},"./src/js/app/components/material.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var a=n("./node_modules/three/build/three.module.js");function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(t,n){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.material,this.map,this.roughnessMap,this.roughnessLevel=t.roughnessLevel,this.emissiveMap,this.emissive=t.emissive,this.emissiveIntensity=t.emissiveIntensity,this.materialConfig=t,this.textures=n,this.generateMaterial()}var t,n,r;return t=e,(n=[{key:"generateMaterial",value:function(){var e=this;return this.textures.forEach((function(t){"map"==t.userData.type?e.map=t:"roughness"==t.userData.type?e.roughnessMap=t:"emissive"==t.userData.type&&(e.emissiveMap=t)})),this.material=new a[this.materialConfig.type]({side:a.FrontSide,map:this.map?this.map:null,roughnessMap:this.roughnessMap?this.roughnessMap:null,roughness:this.roughnessLevel?this.roughnessLevel:1,emissiveMap:this.emissiveMap?this.emissiveMap:null,emissive:this.emissive?this.emissive:new a.Color("rgb(0, 0, 0)"),emissiveIntensity:this.emissiveIntensity?this.emissiveIntensity:1,metalness:0}),this.material}},{key:"getMaterial",value:function(){return this.material}}])&&s(t.prototype,n),r&&s(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/loaders/GLTFLoader.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{GLTFLoader:()=>r});var a=n("./node_modules/three/build/three.module.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}var r=function(){function e(e){a.Loader.call(this,e),this.dracoLoader=null,this.ddsLoader=null}function t(){var e={};return{get:function(t){return e[t]},add:function(t,n){e[t]=n},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(a.Loader.prototype),{constructor:e,load:function(e,t,n,s){var r,i=this;r=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:a.LoaderUtils.extractUrlBase(e),i.manager.itemStart(e);var o=function(t){s?s(t):console.error(t),i.manager.itemError(e),i.manager.itemEnd(e)},l=new a.FileLoader(i.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),"use-credentials"===i.crossOrigin&&l.setWithCredentials(!0),l.load(e,(function(n){try{i.parse(n,r,(function(n){t(n),i.manager.itemEnd(e)}),o)}catch(e){o(e)}}),n,o)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},parse:function(e,t,s,u){var h,f={};if("string"==typeof e)h=e;else if(a.LoaderUtils.decodeText(new Uint8Array(e,0,4))===c){try{f[n.KHR_BINARY_GLTF]=new d(e)}catch(e){return void(u&&u(e))}h=f[n.KHR_BINARY_GLTF].content}else h=a.LoaderUtils.decodeText(new Uint8Array(e));var y=JSON.parse(h);if(void 0===y.asset||y.asset.version[0]<2)u&&u(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{if(y.extensionsUsed)for(var b=0;b<y.extensionsUsed.length;++b){var M=y.extensionsUsed[b],w=y.extensionsRequired||[];switch(M){case n.KHR_LIGHTS_PUNCTUAL:f[M]=new i(y);break;case n.KHR_MATERIALS_CLEARCOAT:f[M]=new l;break;case n.KHR_MATERIALS_UNLIT:f[M]=new o;break;case n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:f[M]=new g;break;case n.KHR_DRACO_MESH_COMPRESSION:f[M]=new p(y,this.dracoLoader);break;case n.MSFT_TEXTURE_DDS:f[M]=new r(this.ddsLoader);break;case n.KHR_TEXTURE_TRANSFORM:f[M]=new m;break;case n.KHR_MESH_QUANTIZATION:f[M]=new v;break;default:w.indexOf(M)>=0&&console.warn('THREE.GLTFLoader: Unknown extension "'+M+'".')}}new B(y,f,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager}).parse(s,u)}}});var n={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function r(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=n.MSFT_TEXTURE_DDS,this.ddsLoader=e}function i(e){this.name=n.KHR_LIGHTS_PUNCTUAL;var t=e.extensions&&e.extensions[n.KHR_LIGHTS_PUNCTUAL]||{};this.lightDefs=t.lights||[]}function o(){this.name=n.KHR_MATERIALS_UNLIT}function l(){this.name=n.KHR_MATERIALS_CLEARCOAT}i.prototype.loadLight=function(e){var t,n=this.lightDefs[e],s=new a.Color(16777215);void 0!==n.color&&s.fromArray(n.color);var r=void 0!==n.range?n.range:0;switch(n.type){case"directional":(t=new a.DirectionalLight(s)).target.position.set(0,0,-1),t.add(t.target);break;case"point":(t=new a.PointLight(s)).distance=r;break;case"spot":(t=new a.SpotLight(s)).distance=r,n.spot=n.spot||{},n.spot.innerConeAngle=void 0!==n.spot.innerConeAngle?n.spot.innerConeAngle:0,n.spot.outerConeAngle=void 0!==n.spot.outerConeAngle?n.spot.outerConeAngle:Math.PI/4,t.angle=n.spot.outerConeAngle,t.penumbra=1-n.spot.innerConeAngle/n.spot.outerConeAngle,t.target.position.set(0,0,-1),t.add(t.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+n.type+'".')}return t.position.set(0,0,0),t.decay=2,void 0!==n.intensity&&(t.intensity=n.intensity),t.name=n.name||"light_"+e,Promise.resolve(t)},o.prototype.getMaterialType=function(){return a.MeshBasicMaterial},o.prototype.extendParams=function(e,t,n){var s=[];e.color=new a.Color(1,1,1),e.opacity=1;var r=t.pbrMetallicRoughness;if(r){if(Array.isArray(r.baseColorFactor)){var i=r.baseColorFactor;e.color.fromArray(i),e.opacity=i[3]}void 0!==r.baseColorTexture&&s.push(n.assignTexture(e,"map",r.baseColorTexture))}return Promise.all(s)},l.prototype.getMaterialType=function(){return a.MeshPhysicalMaterial},l.prototype.extendParams=function(e,t,n){var s=[],r=t.extensions[this.name];if(void 0!==r.clearcoatFactor&&(e.clearcoat=r.clearcoatFactor),void 0!==r.clearcoatTexture&&s.push(n.assignTexture(e,"clearcoatMap",r.clearcoatTexture)),void 0!==r.clearcoatRoughnessFactor&&(e.clearcoatRoughness=r.clearcoatRoughnessFactor),void 0!==r.clearcoatRoughnessTexture&&s.push(n.assignTexture(e,"clearcoatRoughnessMap",r.clearcoatRoughnessTexture)),void 0!==r.clearcoatNormalTexture&&(s.push(n.assignTexture(e,"clearcoatNormalMap",r.clearcoatNormalTexture)),void 0!==r.clearcoatNormalTexture.scale)){var i=r.clearcoatNormalTexture.scale;e.clearcoatNormalScale=new a.Vector2(i,i)}return Promise.all(s)};var c="glTF",u=1313821514,h=5130562;function d(e){this.name=n.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:a.LoaderUtils.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==c)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var s=new DataView(e,12),r=0;r<s.byteLength;){var i=s.getUint32(r,!0);r+=4;var o=s.getUint32(r,!0);if(r+=4,o===u){var l=new Uint8Array(e,12+r,i);this.content=a.LoaderUtils.decodeText(l)}else if(o===h){var d=12+r;this.body=e.slice(d,d+i)}r+=i}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function p(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=n.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function m(){this.name=n.KHR_TEXTURE_TRANSFORM}function f(e){a.MeshStandardMaterial.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),n=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),s=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),r=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),i=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb;","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor.rgb;"].join("\n"),o={specular:{value:(new a.Color).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=o,this.onBeforeCompile=function(e){for(var a in o)e.uniforms[a]=o[a];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;"),e.fragmentShader=e.fragmentShader.replace("uniform float metalness;","uniform float glossiness;"),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_pars_fragment>",t),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_pars_fragment>",n),e.fragmentShader=e.fragmentShader.replace("#include <roughnessmap_fragment>",s),e.fragmentShader=e.fragmentShader.replace("#include <metalnessmap_fragment>",r),e.fragmentShader=e.fragmentShader.replace("#include <lights_physical_fragment>",i)},Object.defineProperties(this,{specular:{get:function(){return o.specular.value},set:function(e){o.specular.value=e}},specularMap:{get:function(){return o.specularMap.value},set:function(e){o.specularMap.value=e}},glossiness:{get:function(){return o.glossiness.value},set:function(e){o.glossiness.value=e}},glossinessMap:{get:function(){return o.glossinessMap.value},set:function(e){o.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_ROUGHNESSMAP=""):(delete this.defines.USE_ROUGHNESSMAP,delete this.defines.USE_GLOSSINESSMAP)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return f},extendParams:function(e,t,n){var s=t.extensions[this.name];e.color=new a.Color(1,1,1),e.opacity=1;var r=[];if(Array.isArray(s.diffuseFactor)){var i=s.diffuseFactor;e.color.fromArray(i),e.opacity=i[3]}if(void 0!==s.diffuseTexture&&r.push(n.assignTexture(e,"map",s.diffuseTexture)),e.emissive=new a.Color(0,0,0),e.glossiness=void 0!==s.glossinessFactor?s.glossinessFactor:1,e.specular=new a.Color(1,1,1),Array.isArray(s.specularFactor)&&e.specular.fromArray(s.specularFactor),void 0!==s.specularGlossinessTexture){var o=s.specularGlossinessTexture;r.push(n.assignTexture(e,"glossinessMap",o)),r.push(n.assignTexture(e,"specularMap",o))}return Promise.all(r)},createMaterial:function(e){var t=new f(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=a.TangentSpaceNormalMap,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function v(){this.name=n.KHR_MESH_QUANTIZATION}function y(e,t,n,s){a.Interpolant.call(this,e,t,n,s)}p.prototype.decodePrimitive=function(e,t){var n=this.json,a=this.dracoLoader,s=e.extensions[this.name].bufferView,r=e.extensions[this.name].attributes,i={},o={},l={};for(var c in r){var u=P[c]||c.toLowerCase();i[u]=r[c]}for(c in e.attributes){u=P[c]||c.toLowerCase();if(void 0!==r[c]){var h=n.accessors[e.attributes[c]],d=x[h.componentType];l[u]=d,o[u]=!0===h.normalized}}return t.getDependency("bufferView",s).then((function(e){return new Promise((function(t){a.decodeDracoFile(e,(function(e){for(var n in e.attributes){var a=e.attributes[n],s=o[n];void 0!==s&&(a.normalized=s)}t(e)}),i,l)}))}))},m.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},f.prototype=Object.create(a.MeshStandardMaterial.prototype),f.prototype.constructor=f,f.prototype.copy=function(e){return a.MeshStandardMaterial.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},y.prototype=Object.create(a.Interpolant.prototype),y.prototype.constructor=y,y.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,n=this.sampleValues,a=this.valueSize,s=e*a*3+a,r=0;r!==a;r++)t[r]=n[s+r];return t},y.prototype.beforeStart_=y.prototype.copySampleValue_,y.prototype.afterEnd_=y.prototype.copySampleValue_,y.prototype.interpolate_=function(e,t,n,a){for(var s=this.resultBuffer,r=this.sampleValues,i=this.valueSize,o=2*i,l=3*i,c=a-t,u=(n-t)/c,h=u*u,d=h*u,p=e*l,m=p-l,f=-2*d+3*h,g=d-h,v=1-f,y=g-h+u,b=0;b!==i;b++){var M=r[m+b+i],w=r[m+b+o]*c,T=r[p+b+i],S=r[p+b]*c;s[b]=v*M+y*w+f*T+g*S}return s};var b=0,M=1,w=2,T=3,S=4,E=5,L=6,x={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},R={9728:a.NearestFilter,9729:a.LinearFilter,9984:a.NearestMipmapNearestFilter,9985:a.LinearMipmapNearestFilter,9986:a.NearestMipmapLinearFilter,9987:a.LinearMipmapLinearFilter},A={33071:a.ClampToEdgeWrapping,33648:a.MirroredRepeatWrapping,10497:a.RepeatWrapping},j={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},P={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},_={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},O={CUBICSPLINE:void 0,LINEAR:a.InterpolateLinear,STEP:a.InterpolateDiscrete},C="OPAQUE",I="MASK",k="BLEND",D={"image/png":a.RGBAFormat,"image/jpeg":a.RGBFormat};function F(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function U(e,t,n){for(var a in n.extensions)void 0===e[a]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[a]=n.extensions[a])}function H(e,t){void 0!==t.extras&&("object"===s(t.extras)?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function N(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var n=0,a=t.weights.length;n<a;n++)e.morphTargetInfluences[n]=t.weights[n];if(t.extras&&Array.isArray(t.extras.targetNames)){var s=t.extras.targetNames;if(e.morphTargetInfluences.length===s.length){e.morphTargetDictionary={};for(n=0,a=s.length;n<a;n++)e.morphTargetDictionary[s[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function G(e){for(var t="",n=Object.keys(e).sort(),a=0,s=n.length;a<s;a++)t+=n[a]+":"+e[n[a]]+";";return t}function B(e,n,s){this.json=e||{},this.extensions=n||{},this.options=s||{},this.cache=new t,this.primitiveCache={},this.textureLoader=new a.TextureLoader(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new a.FileLoader(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function z(e,t,n){var s=t.attributes,r=[];function i(t,a){return n.getDependency("accessor",t).then((function(t){e.setAttribute(a,t)}))}for(var o in s){var l=P[o]||o.toLowerCase();l in e.attributes||r.push(i(s[o],l))}if(void 0!==t.indices&&!e.index){var c=n.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));r.push(c)}return H(e,t),function(e,t,n){var s=t.attributes,r=new a.Box3;if(void 0!==s.POSITION){var i=(p=n.json.accessors[s.POSITION]).min,o=p.max;if(void 0!==i&&void 0!==o){r.set(new a.Vector3(i[0],i[1],i[2]),new a.Vector3(o[0],o[1],o[2]));var l=t.targets;if(void 0!==l){for(var c=new a.Vector3,u=new a.Vector3,h=0,d=l.length;h<d;h++){var p,m=l[h];if(void 0!==m.POSITION)i=(p=n.json.accessors[m.POSITION]).min,o=p.max,void 0!==i&&void 0!==o?(u.setX(Math.max(Math.abs(i[0]),Math.abs(o[0]))),u.setY(Math.max(Math.abs(i[1]),Math.abs(o[1]))),u.setZ(Math.max(Math.abs(i[2]),Math.abs(o[2]))),c.max(u)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}r.expandByVector(c)}e.boundingBox=r;var f=new a.Sphere;r.getCenter(f.center),f.radius=r.min.distanceTo(r.max)/2,e.boundingSphere=f}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,n),Promise.all(r).then((function(){return void 0!==t.targets?function(e,t,n){for(var a=!1,s=!1,r=0,i=t.length;r<i&&(void 0!==(c=t[r]).POSITION&&(a=!0),void 0!==c.NORMAL&&(s=!0),!a||!s);r++);if(!a&&!s)return Promise.resolve(e);var o=[],l=[];for(r=0,i=t.length;r<i;r++){var c=t[r];if(a){var u=void 0!==c.POSITION?n.getDependency("accessor",c.POSITION):e.attributes.position;o.push(u)}s&&(u=void 0!==c.NORMAL?n.getDependency("accessor",c.NORMAL):e.attributes.normal,l.push(u))}return Promise.all([Promise.all(o),Promise.all(l)]).then((function(t){var n=t[0],r=t[1];return a&&(e.morphAttributes.position=n),s&&(e.morphAttributes.normal=r),e.morphTargetsRelative=!0,e}))}(e,t.targets,n):e}))}function V(e,t){var n=e.getIndex();if(null===n){var s=[],r=e.getAttribute("position");if(void 0===r)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var i=0;i<r.count;i++)s.push(i);e.setIndex(s),n=e.getIndex()}var o=n.count-2,l=[];if(t===a.TriangleFanDrawMode)for(i=1;i<=o;i++)l.push(n.getX(0)),l.push(n.getX(i)),l.push(n.getX(i+1));else for(i=0;i<o;i++)i%2==0?(l.push(n.getX(i)),l.push(n.getX(i+1)),l.push(n.getX(i+2))):(l.push(n.getX(i+2)),l.push(n.getX(i+1)),l.push(n.getX(i)));l.length/3!==o&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var c=e.clone();return c.setIndex(l),c}return B.prototype.parse=function(e,t){var n=this,a=this.json,s=this.extensions;this.cache.removeAll(),this.markDefs(),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var r={scene:t[0][a.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:a.asset,parser:n,userData:{}};U(s,r,a),H(r,a),e(r)})).catch(t)},B.prototype.markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[],a={},s={},r=0,i=t.length;r<i;r++)for(var o=t[r].joints,l=0,c=o.length;l<c;l++)e[o[l]].isBone=!0;for(var u=0,h=e.length;u<h;u++){var d=e[u];void 0!==d.mesh&&(void 0===a[d.mesh]&&(a[d.mesh]=s[d.mesh]=0),a[d.mesh]++,void 0!==d.skin&&(n[d.mesh].isSkinnedMesh=!0))}this.json.meshReferences=a,this.json.meshUses=s},B.prototype.getDependency=function(e,t){var a=e+":"+t,s=this.cache.get(a);if(!s){switch(e){case"scene":s=this.loadScene(t);break;case"node":s=this.loadNode(t);break;case"mesh":s=this.loadMesh(t);break;case"accessor":s=this.loadAccessor(t);break;case"bufferView":s=this.loadBufferView(t);break;case"buffer":s=this.loadBuffer(t);break;case"material":s=this.loadMaterial(t);break;case"texture":s=this.loadTexture(t);break;case"skin":s=this.loadSkin(t);break;case"animation":s=this.loadAnimation(t);break;case"camera":s=this.loadCamera(t);break;case"light":s=this.extensions[n.KHR_LIGHTS_PUNCTUAL].loadLight(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(a,s)}return s},B.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var n=this,a=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(a.map((function(t,a){return n.getDependency(e,a)}))),this.cache.add(e,t)}return t},B.prototype.loadBuffer=function(e){var t=this.json.buffers[e],a=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[n.KHR_BINARY_GLTF].body);var s=this.options;return new Promise((function(e,n){a.load(F(t.uri,s.path),e,void 0,(function(){n(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},B.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var n=t.byteLength||0,a=t.byteOffset||0;return e.slice(a,a+n)}))},B.prototype.loadAccessor=function(e){var t=this,n=this.json,s=this.json.accessors[e];if(void 0===s.bufferView&&void 0===s.sparse)return Promise.resolve(null);var r=[];return void 0!==s.bufferView?r.push(this.getDependency("bufferView",s.bufferView)):r.push(null),void 0!==s.sparse&&(r.push(this.getDependency("bufferView",s.sparse.indices.bufferView)),r.push(this.getDependency("bufferView",s.sparse.values.bufferView))),Promise.all(r).then((function(e){var r,i,o=e[0],l=j[s.type],c=x[s.componentType],u=c.BYTES_PER_ELEMENT,h=u*l,d=s.byteOffset||0,p=void 0!==s.bufferView?n.bufferViews[s.bufferView].byteStride:void 0,m=!0===s.normalized;if(p&&p!==h){var f=Math.floor(d/p),g="InterleavedBuffer:"+s.bufferView+":"+s.componentType+":"+f+":"+s.count,v=t.cache.get(g);v||(r=new c(o,f*p,s.count*p/u),v=new a.InterleavedBuffer(r,p/u),t.cache.add(g,v)),i=new a.InterleavedBufferAttribute(v,l,d%p/u,m)}else r=null===o?new c(s.count*l):new c(o,d,s.count*l),i=new a.BufferAttribute(r,l,m);if(void 0!==s.sparse){var y=j.SCALAR,b=x[s.sparse.indices.componentType],M=s.sparse.indices.byteOffset||0,w=s.sparse.values.byteOffset||0,T=new b(e[1],M,s.sparse.count*y),S=new c(e[2],w,s.sparse.count*l);null!==o&&(i=new a.BufferAttribute(i.array.slice(),i.itemSize,i.normalized));for(var E=0,L=T.length;E<L;E++){var R=T[E];if(i.setX(R,S[E*l]),l>=2&&i.setY(R,S[E*l+1]),l>=3&&i.setZ(R,S[E*l+2]),l>=4&&i.setW(R,S[E*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return i}))},B.prototype.loadTexture=function(e){var t,s=this,r=this.json,i=this.options,o=this.textureLoader,l=self.URL||self.webkitURL,c=r.textures[e],u=c.extensions||{},h=(t=u[n.MSFT_TEXTURE_DDS]?r.images[u[n.MSFT_TEXTURE_DDS].source]:r.images[c.source]).uri,d=!1;return void 0!==t.bufferView&&(h=s.getDependency("bufferView",t.bufferView).then((function(e){d=!0;var n=new Blob([e],{type:t.mimeType});return h=l.createObjectURL(n)}))),Promise.resolve(h).then((function(e){var t=i.manager.getHandler(e);return t||(t=u[n.MSFT_TEXTURE_DDS]?s.extensions[n.MSFT_TEXTURE_DDS].ddsLoader:o),new Promise((function(n,a){t.load(F(e,i.path),n,void 0,a)}))})).then((function(e){!0===d&&l.revokeObjectURL(h),e.flipY=!1,c.name&&(e.name=c.name),t.mimeType in D&&(e.format=D[t.mimeType]);var n=(r.samplers||{})[c.sampler]||{};return e.magFilter=R[n.magFilter]||a.LinearFilter,e.minFilter=R[n.minFilter]||a.LinearMipmapLinearFilter,e.wrapS=A[n.wrapS]||a.RepeatWrapping,e.wrapT=A[n.wrapT]||a.RepeatWrapping,e}))},B.prototype.assignTexture=function(e,t,s){var r=this;return this.getDependency("texture",s.index).then((function(i){if(!i.isCompressedTexture)switch(t){case"aoMap":case"emissiveMap":case"metalnessMap":case"normalMap":case"roughnessMap":i.format=a.RGBFormat}if(void 0===s.texCoord||0==s.texCoord||"aoMap"===t&&1==s.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+s.texCoord+" for texture "+t+" not yet supported."),r.extensions[n.KHR_TEXTURE_TRANSFORM]){var o=void 0!==s.extensions?s.extensions[n.KHR_TEXTURE_TRANSFORM]:void 0;o&&(i=r.extensions[n.KHR_TEXTURE_TRANSFORM].extendTexture(i,o))}e[t]=i}))},B.prototype.assignFinalMaterial=function(e){var t=e.geometry,n=e.material,s=void 0!==t.attributes.tangent,r=void 0!==t.attributes.color,i=void 0===t.attributes.normal,o=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,c=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var u="PointsMaterial:"+n.uuid,h=this.cache.get(u);h||(h=new a.PointsMaterial,a.Material.prototype.copy.call(h,n),h.color.copy(n.color),h.map=n.map,h.sizeAttenuation=!1,this.cache.add(u,h)),n=h}else if(e.isLine){u="LineBasicMaterial:"+n.uuid;var d=this.cache.get(u);d||(d=new a.LineBasicMaterial,a.Material.prototype.copy.call(d,n),d.color.copy(n.color),this.cache.add(u,d)),n=d}if(s||r||i||o||l){u="ClonedMaterial:"+n.uuid+":";n.isGLTFSpecularGlossinessMaterial&&(u+="specular-glossiness:"),o&&(u+="skinning:"),s&&(u+="vertex-tangents:"),r&&(u+="vertex-colors:"),i&&(u+="flat-shading:"),l&&(u+="morph-targets:"),c&&(u+="morph-normals:");var p=this.cache.get(u);p||(p=n.clone(),o&&(p.skinning=!0),s&&(p.vertexTangents=!0),r&&(p.vertexColors=!0),i&&(p.flatShading=!0),l&&(p.morphTargets=!0),c&&(p.morphNormals=!0),this.cache.add(u,p)),n=p}n.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),n.normalScale&&!s&&(n.normalScale.y=-n.normalScale.y),n.clearcoatNormalScale&&!s&&(n.clearcoatNormalScale.y=-n.clearcoatNormalScale.y),e.material=n},B.prototype.loadMaterial=function(e){var t,s=this,r=this.json,i=this.extensions,o=r.materials[e],l={},c=o.extensions||{},u=[];if(c[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var h=i[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=h.getMaterialType(),u.push(h.extendParams(l,o,s))}else if(c[n.KHR_MATERIALS_UNLIT]){var d=i[n.KHR_MATERIALS_UNLIT];t=d.getMaterialType(),u.push(d.extendParams(l,o,s))}else{t=a.MeshStandardMaterial;var p=o.pbrMetallicRoughness||{};if(l.color=new a.Color(1,1,1),l.opacity=1,Array.isArray(p.baseColorFactor)){var m=p.baseColorFactor;l.color.fromArray(m),l.opacity=m[3]}void 0!==p.baseColorTexture&&u.push(s.assignTexture(l,"map",p.baseColorTexture)),l.metalness=void 0!==p.metallicFactor?p.metallicFactor:1,l.roughness=void 0!==p.roughnessFactor?p.roughnessFactor:1,void 0!==p.metallicRoughnessTexture&&(u.push(s.assignTexture(l,"metalnessMap",p.metallicRoughnessTexture)),u.push(s.assignTexture(l,"roughnessMap",p.metallicRoughnessTexture)))}!0===o.doubleSided&&(l.side=a.DoubleSide);var g=o.alphaMode||C;if(g===k?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,g===I&&(l.alphaTest=void 0!==o.alphaCutoff?o.alphaCutoff:.5)),void 0!==o.normalTexture&&t!==a.MeshBasicMaterial&&(u.push(s.assignTexture(l,"normalMap",o.normalTexture)),l.normalScale=new a.Vector2(1,1),void 0!==o.normalTexture.scale&&l.normalScale.set(o.normalTexture.scale,o.normalTexture.scale)),void 0!==o.occlusionTexture&&t!==a.MeshBasicMaterial&&(u.push(s.assignTexture(l,"aoMap",o.occlusionTexture)),void 0!==o.occlusionTexture.strength&&(l.aoMapIntensity=o.occlusionTexture.strength)),void 0!==o.emissiveFactor&&t!==a.MeshBasicMaterial&&(l.emissive=(new a.Color).fromArray(o.emissiveFactor)),void 0!==o.emissiveTexture&&t!==a.MeshBasicMaterial&&u.push(s.assignTexture(l,"emissiveMap",o.emissiveTexture)),c[n.KHR_MATERIALS_CLEARCOAT]){var v=i[n.KHR_MATERIALS_CLEARCOAT];t=v.getMaterialType(),u.push(v.extendParams(l,{extensions:c},s))}return Promise.all(u).then((function(){var e;return e=t===f?i[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),o.name&&(e.name=o.name),e.map&&(e.map.encoding=a.sRGBEncoding),e.emissiveMap&&(e.emissiveMap.encoding=a.sRGBEncoding),H(e,o),o.extensions&&U(i,e,o),e}))},B.prototype.loadGeometries=function(e){var t=this,s=this.extensions,r=this.primitiveCache;function i(e){return s[n.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(n){return z(n,e,t)}))}for(var o,l,c=[],u=0,h=e.length;u<h;u++){var d,p=e[u],m=(l=void 0,(l=(o=p).extensions&&o.extensions[n.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+G(l.attributes):o.indices+":"+G(o.attributes)+":"+o.mode),f=r[m];if(f)c.push(f.promise);else d=p.extensions&&p.extensions[n.KHR_DRACO_MESH_COMPRESSION]?i(p):z(new a.BufferGeometry,p,t),r[m]={primitive:p,promise:d},c.push(d)}return Promise.all(c)},B.prototype.loadMesh=function(e){for(var t,n=this,s=this.json.meshes[e],r=s.primitives,i=[],o=0,l=r.length;o<l;o++){var c=void 0===r[o].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new a.MeshStandardMaterial({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:a.FrontSide})),t.DefaultMaterial):this.getDependency("material",r[o].material);i.push(c)}return i.push(n.loadGeometries(r)),Promise.all(i).then((function(t){for(var i=t.slice(0,t.length-1),o=t[t.length-1],l=[],c=0,u=o.length;c<u;c++){var h,d=o[c],p=r[c],m=i[c];if(p.mode===S||p.mode===E||p.mode===L||void 0===p.mode)!0!==(h=!0===s.isSkinnedMesh?new a.SkinnedMesh(d,m):new a.Mesh(d,m)).isSkinnedMesh||h.geometry.attributes.skinWeight.normalized||h.normalizeSkinWeights(),p.mode===E?h.geometry=V(h.geometry,a.TriangleStripDrawMode):p.mode===L&&(h.geometry=V(h.geometry,a.TriangleFanDrawMode));else if(p.mode===M)h=new a.LineSegments(d,m);else if(p.mode===T)h=new a.Line(d,m);else if(p.mode===w)h=new a.LineLoop(d,m);else{if(p.mode!==b)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+p.mode);h=new a.Points(d,m)}Object.keys(h.geometry.morphAttributes).length>0&&N(h,s),h.name=s.name||"mesh_"+e,o.length>1&&(h.name+="_"+c),H(h,s),n.assignFinalMaterial(h),l.push(h)}if(1===l.length)return l[0];var f=new a.Group;for(c=0,u=l.length;c<u;c++)f.add(l[c]);return f}))},B.prototype.loadCamera=function(e){var t,n=this.json.cameras[e],s=n[n.type];if(s)return"perspective"===n.type?t=new a.PerspectiveCamera(a.MathUtils.radToDeg(s.yfov),s.aspectRatio||1,s.znear||1,s.zfar||2e6):"orthographic"===n.type&&(t=new a.OrthographicCamera(-s.xmag,s.xmag,s.ymag,-s.ymag,s.znear,s.zfar)),n.name&&(t.name=n.name),H(t,n),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},B.prototype.loadSkin=function(e){var t=this.json.skins[e],n={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(n):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return n.inverseBindMatrices=e,n}))},B.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],n=[],s=[],r=[],i=[],o=[],l=0,c=t.channels.length;l<c;l++){var u=t.channels[l],h=t.samplers[u.sampler],d=u.target,p=void 0!==d.node?d.node:d.id,m=void 0!==t.parameters?t.parameters[h.input]:h.input,f=void 0!==t.parameters?t.parameters[h.output]:h.output;n.push(this.getDependency("node",p)),s.push(this.getDependency("accessor",m)),r.push(this.getDependency("accessor",f)),i.push(h),o.push(d)}return Promise.all([Promise.all(n),Promise.all(s),Promise.all(r),Promise.all(i),Promise.all(o)]).then((function(n){for(var s=n[0],r=n[1],i=n[2],o=n[3],l=n[4],c=[],u=0,h=s.length;u<h;u++){var d=s[u],p=r[u],m=i[u],f=o[u],g=l[u];if(void 0!==d){var v;switch(d.updateMatrix(),d.matrixAutoUpdate=!0,_[g.path]){case _.weights:v=a.NumberKeyframeTrack;break;case _.rotation:v=a.QuaternionKeyframeTrack;break;default:v=a.VectorKeyframeTrack}var b=d.name?d.name:d.uuid,M=void 0!==f.interpolation?O[f.interpolation]:a.InterpolateLinear,w=[];_[g.path]===_.weights?d.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&w.push(e.name?e.name:e.uuid)})):w.push(b);var T=m.array;if(m.normalized){var S;if(T.constructor===Int8Array)S=1/127;else if(T.constructor===Uint8Array)S=1/255;else if(T.constructor==Int16Array)S=1/32767;else{if(T.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");S=1/65535}for(var E=new Float32Array(T.length),L=0,x=T.length;L<x;L++)E[L]=T[L]*S;T=E}for(L=0,x=w.length;L<x;L++){var R=new v(w[L]+"."+_[g.path],p.array,T,M);"CUBICSPLINE"===f.interpolation&&(R.createInterpolant=function(e){return new y(this.times,this.values,this.getValueSize()/3,e)},R.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),c.push(R)}}}var A=t.name?t.name:"animation_"+e;return new a.AnimationClip(A,void 0,c)}))},B.prototype.loadNode=function(e){var t,s=this.json,r=this.extensions,i=this,o=s.meshReferences,l=s.meshUses,c=s.nodes[e];return(t=[],void 0!==c.mesh&&t.push(i.getDependency("mesh",c.mesh).then((function(e){var t;if(o[c.mesh]>1){var n=l[c.mesh]++;(t=e.clone()).name+="_instance_"+n}else t=e;return void 0!==c.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,n=c.weights.length;t<n;t++)e.morphTargetInfluences[t]=c.weights[t]})),t}))),void 0!==c.camera&&t.push(i.getDependency("camera",c.camera)),c.extensions&&c.extensions[n.KHR_LIGHTS_PUNCTUAL]&&void 0!==c.extensions[n.KHR_LIGHTS_PUNCTUAL].light&&t.push(i.getDependency("light",c.extensions[n.KHR_LIGHTS_PUNCTUAL].light)),Promise.all(t)).then((function(e){var t;if((t=!0===c.isBone?new a.Bone:e.length>1?new a.Group:1===e.length?e[0]:new a.Object3D)!==e[0])for(var n=0,s=e.length;n<s;n++)t.add(e[n]);if(c.name&&(t.userData.name=c.name,t.name=a.PropertyBinding.sanitizeNodeName(c.name)),H(t,c),c.extensions&&U(r,t,c),void 0!==c.matrix){var i=new a.Matrix4;i.fromArray(c.matrix),t.applyMatrix4(i)}else void 0!==c.translation&&t.position.fromArray(c.translation),void 0!==c.rotation&&t.quaternion.fromArray(c.rotation),void 0!==c.scale&&t.scale.fromArray(c.scale);return t}))},B.prototype.loadScene=function(){function e(t,n,s,r){var i=s.nodes[t];return r.getDependency("node",t).then((function(e){return void 0===i.skin?e:r.getDependency("skin",i.skin).then((function(e){for(var n=[],a=0,s=(t=e).joints.length;a<s;a++)n.push(r.getDependency("node",t.joints[a]));return Promise.all(n)})).then((function(n){return e.traverse((function(e){if(e.isMesh){for(var s=[],r=[],i=0,o=n.length;i<o;i++){var l=n[i];if(l){s.push(l);var c=new a.Matrix4;void 0!==t.inverseBindMatrices&&c.fromArray(t.inverseBindMatrices.array,16*i),r.push(c)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[i])}e.bind(new a.Skeleton(s,r),e.matrixWorld)}})),e}));var t})).then((function(t){n.add(t);var a=[];if(i.children)for(var o=i.children,l=0,c=o.length;l<c;l++){var u=o[l];a.push(e(u,t,s,r))}return Promise.all(a)}))}return function(t){var n=this.json,s=this.extensions,r=this.json.scenes[t],i=new a.Group;r.name&&(i.name=r.name),H(i,r),r.extensions&&U(s,i,r);for(var o=r.nodes||[],l=[],c=0,u=o.length;c<u;c++)l.push(e(o[c],i,n,this));return Promise.all(l).then((function(){return i}))}}(),e}()},"./src/js/app/main.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>m});var a=n("./node_modules/three/build/three.module.js"),s=n("./src/js/app/managers/rendererManager.js"),r=n("./src/js/app/managers/cameraManager.js"),i=n("./src/js/app/managers/lightManager.js"),o=n("./src/js/app/managers/controlsManager.js"),l=n("./src/js/app/managers/textureManager.js"),c=n("./src/js/app/managers/modelManager.js"),u=n("./src/js/app/managers/starfieldManager.js"),h=n("./src/js/app/managers/effectsManager.js"),d=n("./src/js/data/settings.js");function p(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var m=function(){function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.container=t,this.scene=new a.Scene,this.astros={},window.devicePixelRatio&&(d.default.dpr=window.devicePixelRatio),this.rendererManager=new s.default(this.scene,t,d.default),this.cameraManager=new r.default(this.rendererManager.getRenderer(),d.default),this.controlsManager=new o.default(this.cameraManager.getCamera(),this.container,d.default),this.lightManager=new i.default(this.scene,d.default),this.effectsManager=new h.default(this.scene,this.cameraManager,this.rendererManager,d.default),this.intersectedObject,this.raycaster=new a.Raycaster,this.intersects,this.texturesManager=new l.default(d.default),this.texturesManager.load().then((function(){n.loadManager=new a.LoadingManager,n.model=new c.default(n.scene,n.loadManager,n.texturesManager,d.default),n.startFieldManager=new u.default(n.scene,n.texturesManager,d.default),"gltf"==d.default.models[d.default.model.selected].type&&n.model.load(d.default.models[d.default.model.selected].type),n.loadManager.onLoad=function(){d.default.isLoaded=!0,n.container.querySelector("#loading").style.display="none",n.setAstros(),document.addEventListener("click",n.onDocumentMouseClick.bind(n),!1)}})),this.render()}var t,n,m;return t=e,(n=[{key:"onDocumentMouseClick",value:function(e){this.checkObjectIntersections(e)}},{key:"checkObjectIntersections",value:function(e){var t=this,n=this.rendererManager.getContainer();this.raycaster.setFromCamera({x:e.clientX/n.clientWidth*2-1,y:-e.clientY/n.clientHeight*2+1},this.cameraManager.getCamera());var a=Object.values(this.astros);a&&(this.intersects=this.raycaster.intersectObjects(a,!1)),this.intersects.length>0?this.intersectedObject=this.intersects[0].object:this.intersectedObject=null,this.intersectedObject&&d.default.models[d.default.model.selected].astros.forEach((function(e){t.intersectedObject.name===e.name&&t.toggleObjectRotations(t.intersectedObject)}))}},{key:"toggleObjectRotations",value:function(e){null!==e.userData.settings.rotatingtOnItsOwnAxis&&(e.userData.settings.rotatingtOnItsOwnAxis=!e.userData.settings.rotatingtOnItsOwnAxis),null!==e.userData.settings.rotatingOnItsOrbit&&(e.userData.settings.rotatingOnItsOrbit=!e.userData.settings.rotatingOnItsOrbit)}},{key:"setAstros",value:function(){var e=this;d.default.models[d.default.model.selected].astros.forEach((function(t){e.astros[t.name]=e.model.getAstroByName(t.name)}))}},{key:"animateAstros",value:function(){var e=this;d.default.models[d.default.model.selected].astros.forEach((function(t){var n=e.astros[t.name],a=n.userData.settings;a.rotatingtOnItsOwnAxis&&(n.rotation.y+=a.axiRotationSpeed),a.rotatingOnItsOrbit&&(a.theta-=a.deltaTheta);var s=0,r=0;if(a.orbiting){var i=e.model.getAstroByName(a.orbiting);i&&(s=i.position.x,r=i.position.z)}n.position.x=s+a.radius*Math.cos(a.theta),n.position.z=r+a.radius*Math.sin(a.theta)}))}},{key:"render",value:function(){d.default.isLoaded&&this.animateAstros(),this.rendererManager.render(this.scene,this.cameraManager.getCamera()),this.controlsManager.getControls().update(),requestAnimationFrame(this.render.bind(this)),this.effectsManager&&this.effectsManager.getEffectComposer().render()}}])&&p(t.prototype,n),m&&p(t,m),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/cameraManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var a=n("./node_modules/three/build/three.module.js");function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var s=t.domElement.width,r=t.domElement.height;this.renderer=t,this.settings=n,this.threeCamera=new a.PerspectiveCamera(this.settings.camera.fov,s/r,this.settings.camera.near,this.settings.camera.far),this.threeCamera.position.set(this.settings.camera.posX,this.settings.camera.posY,this.settings.camera.posZ),this.init()}var t,n,r;return t=e,(n=[{key:"init",value:function(){var e=this;this.updateSize(this.renderer),window.addEventListener("resize",(function(){return e.updateSize(e.renderer)}),!1)}},{key:"updateSize",value:function(e){this.threeCamera.aspect=e.domElement.width/e.domElement.height,this.threeCamera.updateProjectionMatrix()}},{key:"getCamera",value:function(){return this.threeCamera}}])&&s(t.prototype,n),r&&s(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/controlsManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var a=n("./node_modules/three/build/three.module.js"),s=n("./src/js/utils/orbitControls.js"),r=n.n(s);function i(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(t,n,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=new(r())(a);this.threeControls=new i(t,n),this.settings=s,this.init()}var t,n,s;return t=e,(n=[{key:"init",value:function(){this.threeControls.target.set(this.settings.controls.target.x,this.settings.controls.target.y,this.settings.controls.target.z),this.threeControls.autoRotate=this.settings.controls.autoRotate,this.threeControls.autoRotateSpeed=this.settings.controls.autoRotateSpeed,this.threeControls.rotateSpeed=this.settings.controls.rotateSpeed,this.threeControls.zoomSpeed=this.settings.controls.zoomSpeed,this.threeControls.minDistance=this.settings.controls.minDistance,this.threeControls.maxDistance=this.settings.controls.maxDistance,this.threeControls.minPolarAngle=this.settings.controls.minPolarAngle,this.threeControls.maxPolarAngle=this.settings.controls.maxPolarAngle,this.threeControls.enableDamping=this.settings.controls.enableDamping,this.threeControls.enableZoom=this.settings.controls.enableZoom,this.threeControls.dampingFactor=this.settings.controls.dampingFactor}},{key:"getControls",value:function(){return this.threeControls}}])&&i(t.prototype,n),s&&i(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/effectsManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var a=n("./node_modules/three/build/three.module.js"),s=n("./node_modules/three/examples/jsm/postprocessing/EffectComposer.js"),r=n("./node_modules/three/examples/jsm/postprocessing/RenderPass.js"),i=n("./node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js");function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(t,n,a,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.rendererManager=a,this.cameraManager=n,this.settings=s,this.init()}var t,n,l;return t=e,(n=[{key:"init",value:function(){var e=this.cameraManager.getCamera(),t=this.rendererManager.getRenderer(),n=new r.RenderPass(this.scene,e),o=new i.UnrealBloomPass(new a.Vector2(this.rendererManager.getContainer().offsetWidth,this.rendererManager.getContainer().offsetHeight),this.settings.effects.bloom.strength,this.settings.effects.bloom.radius,this.settings.effects.bloom.threshold);this.composer=new s.EffectComposer(t),this.composer.setSize(this.rendererManager.getContainer().offsetWidth,this.rendererManager.getContainer().offsetHeight),this.composer.renderToScreen=!0,this.composer.addPass(n),this.composer.addPass(o),this.rendererManager.setGlobalEffectComposer(this.composer)}},{key:"getEffectComposer",value:function(){return this.composer}},{key:"unload",value:function(){this.scene.remove(this.starfield)}}])&&o(t.prototype,n),l&&o(t,l),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/lightManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var a=n("./node_modules/three/build/three.module.js");function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.settings=n,this.init()}var t,n,r;return t=e,(n=[{key:"init",value:function(){this.ambientLight=new a.AmbientLight(this.settings.ambientLight.color),this.ambientLight.visible=this.settings.ambientLight.enabled,this.ambientLight.intensity=this.settings.ambientLight.intensity,this.pointLight=new a.PointLight(this.settings.pointLight.color,this.settings.pointLight.intensity,this.settings.pointLight.distance),this.pointLight.position.set(this.settings.pointLight.x,this.settings.pointLight.y,this.settings.pointLight.z),this.pointLight.visible=this.settings.pointLight.enabled,this.pointLight.castShadow=!0,this.pointLight.shadow.mapSize.width=this.settings.pointLight.shadow.mapSizeWidth,this.pointLight.shadow.mapSize.height=this.settings.pointLight.shadow.mapSizeHeight,this.pointLight.shadow.camera.near=this.settings.pointLight.shadow.cameraNear,this.pointLight.shadow.camera.far=this.settings.pointLight.shadow.cameraFar,this.pointLight.shadow.bias=this.settings.pointLight.shadow.bias,this.pointLight.shadow.camera.left=this.settings.pointLight.shadow.cameraLeft,this.pointLight.shadow.camera.right=this.settings.pointLight.shadow.cameraRight,this.pointLight.shadow.camera.top=this.settings.pointLight.shadow.cameraTop,this.pointLight.shadow.camera.bottom=this.settings.pointLight.shadow.cameraBottom,this.pointLight.shadow.radius=this.settings.pointLight.shadow.radius,this.pointLight.shadow.blurSamples=this.settings.pointLight.shadow.blurSamples,this.scene.add(this.ambientLight),this.scene.add(this.pointLight)}},{key:"getLight",value:function(){return this.pointLight}}])&&s(t.prototype,n),r&&s(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/modelManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var a=n("./node_modules/three/build/three.module.js"),s=n("./src/js/app/components/material.js"),r=n("./src/js/utils/helpers.js"),i=n("./src/js/app/loaders/GLTFLoader.js");function o(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var l=function(){function e(t,n,a,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.texturesManager=a,this.loadManager=n,this.settings=s,this.solarSystem=null}var t,n,l;return t=e,(n=[{key:"load",value:function(){var e=this;new i.GLTFLoader(this.loadManager).load(this.settings.models[this.settings.model.selected].path,(function(t){var n=t.scene,r=new a.Group;r.scale.multiplyScalar(1),n.traverse((function(t){if((t.isMesh||t.isLight)&&(t.castShadow=!0),t.isMesh){t.receiveShadow=!0;var n=e.settings.materials.find((function(e){return e.meshTarget==t.name})),a=[];n.maps.forEach((function(t){var n=e.texturesManager.getTextureByName(t.name);n&&a.push(n)})),t.material=new s.default(n,a);var i=t.clone();e.settings.models[e.settings.model.selected].astros.forEach((function(e){e.name==i.name&&(i.userData||(i.userData={}),i.rotation.x=e.angleTilt[0],i.rotation.y=e.angleTilt[1],i.rotation.z=e.angleTilt[2],i.castShadow=e.castShadow,i.receiveShadow=e.receiveShadow,i.userData.settings=e)})),r.add(i)}else if(t.isLight){var o=t.clone();r.add(o)}})),r.updateMatrixWorld(!0),e.solarSystem=r,e.scene.add(e.solarSystem)}),r.default.logProgress(),r.default.logError())}},{key:"getAstroByName",value:function(e){return this.scene.getObjectByName(e)}},{key:"getSolarSystem",value:function(){return this.solarSystem}},{key:"unload",value:function(){this.scene.remove(this.solarSystem)}}])&&o(t.prototype,n),l&&o(t,l),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/rendererManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var a=n("./node_modules/three/build/three.module.js");function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(t,n,s){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.container=n,this.settings=s,this.threeRenderer=new a.WebGLRenderer({antialias:!0}),this.threeRenderer.setPixelRatio(window.devicePixelRatio),n.appendChild(this.threeRenderer.domElement),this.threeRenderer.shadowMap.enabled=!0,this.threeRenderer.shadowMap.type=a.PCFSoftShadowMap,this.settings.maxAnisotropy=this.threeRenderer.capabilities.getMaxAnisotropy(),this.updateSize(),document.addEventListener("DOMContentLoaded",(function(){return r.updateSize()}),!1),window.addEventListener("resize",(function(){return r.updateSize()}),!1)}var t,n,r;return t=e,(n=[{key:"updateSize",value:function(){this.threeRenderer.setSize(this.container.offsetWidth,this.container.offsetHeight),this.effectComposer&&this.effectComposer.setSize(this.container.offsetWidth,this.container.offsetHeight)}},{key:"render",value:function(e,t){this.threeRenderer.render(e,t)}},{key:"getRenderer",value:function(){return this.threeRenderer}},{key:"getContainer",value:function(){return this.container}},{key:"setGlobalEffectComposer",value:function(e){this.effectComposer=e}}])&&s(t.prototype,n),r&&s(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/starfieldManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var a=n("./node_modules/three/build/three.module.js");function s(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var r=function(){function e(t,n,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=t,this.texturesManager=n,this.settings=a,this.init()}var t,n,r;return t=e,(n=[{key:"init",value:function(){var e=this.texturesManager.getTextureByName("StarField"),t=new a.SphereGeometry(1e4,50,50),n=new a.MeshPhongMaterial({map:e,side:a.DoubleSide,shininess:1,emissive:new a.Color(1,1,1),emissiveMap:e}),s=new a.Mesh(t,n);this.scene.add(s)}},{key:"getStarfield",value:function(){return this.starfield}},{key:"unload",value:function(){this.scene.remove(this.starfield)}}])&&s(t.prototype,n),r&&s(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/app/managers/textureManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});var a=n("./node_modules/three/build/three.module.js"),s=n("./node_modules/es6-promise/dist/es6-promise.js"),r=n("./src/js/utils/helpers.js");function i(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.textures={},this.settings=t}var t,n,o;return t=e,(n=[{key:"load",value:function(){var e=this,t=new a.TextureLoader,n=this.settings.maxAnisotropy,i=this.settings.texture.imageFiles,o=[];return t.setPath(this.settings.texture.path),i.forEach((function(e){o.push(new s.Promise((function(s,i){t.load(e.image,(function(t){t.anisotropy=n,t.userData={name:e.name,type:e.type,materialTarget:e.materialTarget};var r={};r[e.name]=t,r[e.name]instanceof a.Texture&&s(r)}),r.default.logProgress(),(function(t){return i(new Error(t+"An error occurred loading while loading "+e.image))}))})))})),s.Promise.all(o).then((function(t){for(var n=0;n<t.length;n++)e.textures[Object.keys(t[n])[0]]=t[n][Object.keys(t[n])[0]]}),(function(e){return console.log(e)}))}},{key:"getAllTextures",value:function(){return this.textures}},{key:"getTextureByName",value:function(e){return this.textures[e]}}])&&i(t.prototype,n),o&&i(t,o),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/data/settings.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});const a={isDev:!1,isLoaded:!1,maxAnisotropy:1,dpr:1,model:{selected:0,initialTypes:["gltf"],type:"gltf"},models:[{path:"./assets/models/astros.gltf",scale:100,type:"gltf",astros:[{name:"Sun",position:[0,0,0],angleTilt:[0,0,0],axiRotationSpeed:.003,radius:0,theta:0,deltaTheta:0,orbiting:null,rotatingtOnItsOwnAxis:!0,rotatingOnItsOrbit:null,castShadow:!1,receiveShadow:!1},{name:"Earth",position:[0,0,0],angleTilt:[0,0,.3],axiRotationSpeed:.015,radius:25,theta:0,deltaTheta:1*Math.PI/1e3,orbiting:"Sun",rotatingtOnItsOwnAxis:!0,rotatingOnItsOrbit:!0,castShadow:!0,receiveShadow:!0},{name:"Moon",position:[0,0,0],angleTilt:[0,0,0],axiRotationSpeed:0,radius:8,theta:0,deltaTheta:5.3*Math.PI/1e3,orbiting:"Earth",rotatingtOnItsOwnAxis:!0,rotatingOnItsOrbit:!0,castShadow:!0,receiveShadow:!0}]}],texture:{path:"./assets/textures/",imageFiles:[{name:"Earth",materialTarget:"Earth",type:"map",image:"2k_earth_daymap.jpg"},{name:"EarthSpecular",materialTarget:"Earth",type:"roughness",image:"2k_earth_specular_map.jpg"},{name:"Sun",materialTarget:"Sun",type:"map",image:"2k_sun.jpg"},{name:"SunEmissive",materialTarget:"Sun",type:"emissive",image:"2k_sun.jpg"},{name:"Moon",materialTarget:"Moon",type:"map",image:"2k_moon.jpg"},{name:"StarField",materialTarget:"StarField",type:"map",image:"8k_stars_milky_way.jpg"}]},materials:[{name:"Earth",type:"MeshStandardMaterial",meshTarget:"Earth",roughnessLevel:1,maps:[{name:"Earth",type:"map"},{name:"EarthSpecular",type:"roughnessMap"}]},{name:"Sun",type:"MeshStandardMaterial",meshTarget:"Sun",emissive:"rgb(255, 255, 255)",emissiveIntensity:1,maps:[{name:"Sun",type:"map"},{name:"SunEmissive",type:"emissiveMap"}]},{name:"Moon",type:"MeshStandardMaterial",meshTarget:"Moon",maps:[{name:"Moon",type:"map"}]}],camera:{fov:50,near:.1,far:9e4,aspect:1,posX:0,posY:30,posZ:40},controls:{autoRotate:!1,autoRotateSpeed:-.5,rotateSpeed:.5,zoomSpeed:.8,minDistance:1,maxDistance:600,minPolarAngle:Math.PI/10,maxPolarAngle:Math.PI,minAzimuthAngle:-1/0,maxAzimuthAngle:1/0,enableDamping:!0,dampingFactor:.5,enableZoom:!0,target:{x:0,y:0,z:0}},ambientLight:{enabled:!0,color:1315860,intensity:.4},pointLight:{enabled:!0,color:16777215,intensity:.9,distance:1115,x:0,y:0,z:0,shadow:{mapSizeWidth:2048,mapSizeHeight:2048,cameraNear:.001,cameraFar:1e3,bias:1e-6,cameraLeft:-10,cameraRight:10,cameraTop:10,cameraBottom:-10,radius:5,blurSamples:25}},effects:{bloom:{threshold:.73,strength:1.3,radius:.5}}}},"./src/js/utils/detector.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});const a={canvas:!!window.CanvasRenderingContext2D,webgl:function(){try{var e=document.createElement("canvas");return!(!window.WebGLRenderingContext||!e.getContext("webgl")&&!e.getContext("experimental-webgl"))}catch(e){return!1}}(),workers:!!window.Worker,fileapi:window.File&&window.FileReader&&window.FileList&&window.Blob,getWebGLErrorMessage:function(){var e=document.createElement("div");return e.id="webgl-error-message",e.style.fontFamily="monospace",e.style.fontSize="13px",e.style.fontWeight="normal",e.style.textAlign="center",e.style.background="#fff",e.style.color="#000",e.style.padding="1.5em",e.style.width="400px",e.style.margin="5em auto 0",this.webgl||(e.innerHTML=window.WebGLRenderingContext?['Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br />','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n"):['Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000000">WebGL</a>.<br/>','Find out how to get it <a href="http://get.webgl.org/" style="color:#000000">here</a>.'].join("\n")),e},addGetWebGLMessage:function(e){var t,n,a;t=void 0!==(e=e||{}).parent?e.parent:document.body,n=void 0!==e.id?e.id:"oldie",(a=this.getWebGLErrorMessage()).id=n,t.appendChild(a)}}},"./src/js/utils/helpers.js":(e,t,n)=>{"use strict";function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}n.r(t),n.d(t,{default:()=>s});var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,s;return t=e,s=[{key:"throttle",value:function(e,t,n){var a,s;return t||(t=250),function(){var r=n||this,i=+new Date,o=arguments;a&&i<a+t?(clearTimeout(s),s=setTimeout((function(){a=i,e.apply(r,o)}),t)):(a=i,e.apply(r,o))}}},{key:"logProgress",value:function(){return function(e){if(e.lengthComputable){var t=e.loaded/e.total*100;console.log(Math.round(t,2)+"% downloaded")}}}},{key:"logError",value:function(){return function(e){console.error(e)}}},{key:"handleColorChange",value:function(e){return function(t){"string"==typeof t&&(t=t.replace("#","0x")),e.setHex(t)}}},{key:"update",value:function(e){this.needsUpdate(e.material,e.geometry)}},{key:"needsUpdate",value:function(e,t){return function(){e.shading=+e.shading,e.vertexColors=+e.vertexColors,e.side=+e.side,e.needsUpdate=!0,t.verticesNeedUpdate=!0,t.normalsNeedUpdate=!0,t.colorsNeedUpdate=!0}}},{key:"updateTexture",value:function(e,t,n){return function(a){e[t]=n[a],e.needsUpdate=!0}}}],(n=null)&&a(t.prototype,n),s&&a(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/js/utils/orbitControls.js":e=>{e.exports=function(e){var t=e.MOUSE;function n(t){this.object=t,this.target=new e.Vector3,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.25;var n,a,s,r,i,o,l,c,u=this,h=1e-6,d=0,p=0,m=1,f=new e.Vector3,g=!1;this.getPolarAngle=function(){return a},this.getAzimuthalAngle=function(){return n},this.rotateLeft=function(e){p-=e},this.rotateUp=function(e){d-=e},this.panLeft=(s=new e.Vector3,function(e){var t=this.object.matrix.elements;s.set(t[0],t[1],t[2]),s.multiplyScalar(-e),f.add(s)}),this.panUp=function(){var t=new e.Vector3;return function(e){var n=this.object.matrix.elements;t.set(n[4],n[5],n[6]),t.multiplyScalar(e),f.add(t)}}(),this.pan=function(t,n,a,s){if(u.object instanceof e.PerspectiveCamera){var r=u.object.position.clone().sub(u.target).length();r*=Math.tan(u.object.fov/2*Math.PI/180),u.panLeft(2*t*r/s),u.panUp(2*n*r/s)}else u.object instanceof e.OrthographicCamera?(u.panLeft(t*(u.object.right-u.object.left)/a),u.panUp(n*(u.object.top-u.object.bottom)/s)):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.")},this.dollyIn=function(t){u.object instanceof e.PerspectiveCamera?m/=t:u.object instanceof e.OrthographicCamera?(u.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom*t)),u.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.dollyOut=function(t){u.object instanceof e.PerspectiveCamera?m*=t:u.object instanceof e.OrthographicCamera?(u.object.zoom=Math.max(this.minZoom,Math.min(this.maxZoom,this.object.zoom/t)),u.object.updateProjectionMatrix(),g=!0):console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.")},this.update=(r=new e.Vector3,i=(new e.Quaternion).setFromUnitVectors(t.up,new e.Vector3(0,1,0)),o=i.clone().inverse(),l=new e.Vector3,c=new e.Quaternion,function(){var e=this.object.position;r.copy(e).sub(this.target),r.applyQuaternion(i),n=Math.atan2(r.x,r.z),a=Math.atan2(Math.sqrt(r.x*r.x+r.z*r.z),r.y),n+=p,a+=d,n=Math.max(this.minAzimuthAngle,Math.min(this.maxAzimuthAngle,n)),a=Math.max(this.minPolarAngle,Math.min(this.maxPolarAngle,a)),a=Math.max(h,Math.min(Math.PI-h,a));var t=r.length()*m;return t=Math.max(this.minDistance,Math.min(this.maxDistance,t)),this.target.add(f),r.x=t*Math.sin(a)*Math.sin(n),r.y=t*Math.cos(a),r.z=t*Math.sin(a)*Math.cos(n),r.applyQuaternion(o),e.copy(this.target).add(r),this.object.lookAt(this.target),!0===this.enableDamping?(p*=1-this.dampingFactor,d*=1-this.dampingFactor):(p=0,d=0),m=1,f.set(0,0,0),!!(g||l.distanceToSquared(this.object.position)>h||8*(1-c.dot(this.object.quaternion))>h)&&(l.copy(this.object.position),c.copy(this.object.quaternion),g=!1,!0)})}function a(t,a){var s=new n(t);this.domElement=void 0!==a?a:document,Object.defineProperty(this,"constraint",{get:function(){return s}}),this.getPolarAngle=function(){return s.getPolarAngle()},this.getAzimuthalAngle=function(){return s.getAzimuthalAngle()},this.enabled=!0,this.center=this.target,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.enableKeys=!0,this.keys={LEFT:37,UP:38,RIGHT:39,BOTTOM:40},this.mouseButtons={ORBIT:e.MOUSE.LEFT,ZOOM:e.MOUSE.MIDDLE,PAN:e.MOUSE.RIGHT};var r=this,i=new e.Vector2,o=new e.Vector2,l=new e.Vector2,c=new e.Vector2,u=new e.Vector2,h=new e.Vector2,d=new e.Vector2,p=new e.Vector2,m=new e.Vector2,f=-1,g=0,v=1,y=2,b=3,M=4,w=5,T=f;this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom;var S={type:"change"},E={type:"start"},L={type:"end"};function x(e,t){var n=r.domElement===document?r.domElement.body:r.domElement;s.pan(e,t,n.clientWidth,n.clientHeight)}function R(){return Math.pow(.95,r.zoomSpeed)}function A(e){if(!1!==r.enabled){if(e.preventDefault(),e.button===r.mouseButtons.ORBIT){if(!1===r.enableRotate)return;T=g,i.set(e.clientX,e.clientY)}else if(e.button===r.mouseButtons.ZOOM){if(!1===r.enableZoom)return;T=v,d.set(e.clientX,e.clientY)}else if(e.button===r.mouseButtons.PAN){if(!1===r.enablePan)return;T=y,c.set(e.clientX,e.clientY)}T!==f&&(document.addEventListener("mousemove",j,!1),document.addEventListener("mouseup",P,!1),r.dispatchEvent(E))}}function j(e){if(!1!==r.enabled){e.preventDefault();var t=r.domElement===document?r.domElement.body:r.domElement;if(T===g){if(!1===r.enableRotate)return;o.set(e.clientX,e.clientY),l.subVectors(o,i),s.rotateLeft(2*Math.PI*l.x/t.clientWidth*r.rotateSpeed),s.rotateUp(2*Math.PI*l.y/t.clientHeight*r.rotateSpeed),i.copy(o)}else if(T===v){if(!1===r.enableZoom)return;p.set(e.clientX,e.clientY),m.subVectors(p,d),m.y>0?s.dollyIn(R()):m.y<0&&s.dollyOut(R()),d.copy(p)}else if(T===y){if(!1===r.enablePan)return;u.set(e.clientX,e.clientY),h.subVectors(u,c),x(h.x,h.y),c.copy(u)}T!==f&&r.update()}}function P(){!1!==r.enabled&&(document.removeEventListener("mousemove",j,!1),document.removeEventListener("mouseup",P,!1),r.dispatchEvent(L),T=f)}function _(e){if(!1!==r.enabled&&!1!==r.enableZoom&&T===f){e.preventDefault(),e.stopPropagation();var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?s.dollyOut(R()):t<0&&s.dollyIn(R()),r.update(),r.dispatchEvent(E),r.dispatchEvent(L)}}function O(e){if(!1!==r.enabled&&!1!==r.enableKeys&&!1!==r.enablePan)switch(e.keyCode){case r.keys.UP:x(0,r.keyPanSpeed),r.update();break;case r.keys.BOTTOM:x(0,-r.keyPanSpeed),r.update();break;case r.keys.LEFT:x(r.keyPanSpeed,0),r.update();break;case r.keys.RIGHT:x(-r.keyPanSpeed,0),r.update()}}function C(e){if(!1!==r.enabled){switch(e.touches.length){case 1:if(!1===r.enableRotate)return;T=b,i.set(e.touches[0].pageX,e.touches[0].pageY);break;case 2:if(!1===r.enableZoom)return;T=M;var t=e.touches[0].pageX-e.touches[1].pageX,n=e.touches[0].pageY-e.touches[1].pageY,a=Math.sqrt(t*t+n*n);d.set(0,a);break;case 3:if(!1===r.enablePan)return;T=w,c.set(e.touches[0].pageX,e.touches[0].pageY);break;default:T=f}T!==f&&r.dispatchEvent(E)}}function I(e){if(!1!==r.enabled){e.preventDefault(),e.stopPropagation();var t=r.domElement===document?r.domElement.body:r.domElement;switch(e.touches.length){case 1:if(!1===r.enableRotate)return;if(T!==b)return;o.set(e.touches[0].pageX,e.touches[0].pageY),l.subVectors(o,i),s.rotateLeft(2*Math.PI*l.x/t.clientWidth*r.rotateSpeed),s.rotateUp(2*Math.PI*l.y/t.clientHeight*r.rotateSpeed),i.copy(o),r.update();break;case 2:if(!1===r.enableZoom)return;if(T!==M)return;var n=e.touches[0].pageX-e.touches[1].pageX,a=e.touches[0].pageY-e.touches[1].pageY,g=Math.sqrt(n*n+a*a);p.set(0,g),m.subVectors(p,d),m.y>0?s.dollyOut(R()):m.y<0&&s.dollyIn(R()),d.copy(p),r.update();break;case 3:if(!1===r.enablePan)return;if(T!==w)return;u.set(e.touches[0].pageX,e.touches[0].pageY),h.subVectors(u,c),x(h.x,h.y),c.copy(u),r.update();break;default:T=f}}}function k(){!1!==r.enabled&&(r.dispatchEvent(L),T=f)}function D(e){e.preventDefault()}this.update=function(){this.autoRotate&&T===f&&s.rotateLeft(2*Math.PI/60/60*r.autoRotateSpeed),!0===s.update()&&this.dispatchEvent(S)},this.reset=function(){T=f,this.target.copy(this.target0),this.object.position.copy(this.position0),this.object.zoom=this.zoom0,this.object.updateProjectionMatrix(),this.dispatchEvent(S),this.update()},this.dispose=function(){this.domElement.removeEventListener("contextmenu",D,!1),this.domElement.removeEventListener("mousedown",A,!1),this.domElement.removeEventListener("mousewheel",_,!1),this.domElement.removeEventListener("MozMousePixelScroll",_,!1),this.domElement.removeEventListener("touchstart",C,!1),this.domElement.removeEventListener("touchend",k,!1),this.domElement.removeEventListener("touchmove",I,!1),document.removeEventListener("mousemove",j,!1),document.removeEventListener("mouseup",P,!1),window.removeEventListener("keydown",O,!1)},this.domElement.addEventListener("contextmenu",D,!1),this.domElement.addEventListener("mousedown",A,!1),this.domElement.addEventListener("mousewheel",_,!1),this.domElement.addEventListener("MozMousePixelScroll",_,!1),this.domElement.addEventListener("touchstart",C,!1),this.domElement.addEventListener("touchend",k,!1),this.domElement.addEventListener("touchmove",I,!1),window.addEventListener("keydown",O,!1),this.update()}return t||(t={LEFT:0,MIDDLE:1,RIGHT:2}),a.prototype=Object.create(e.EventDispatcher.prototype),a.prototype.constructor=a,Object.defineProperties(a.prototype,{object:{get:function(){return this.constraint.object}},target:{get:function(){return this.constraint.target},set:function(e){console.warn("THREE.OrbitControls: target is now immutable. Use target.set() instead."),this.constraint.target.copy(e)}},minDistance:{get:function(){return this.constraint.minDistance},set:function(e){this.constraint.minDistance=e}},maxDistance:{get:function(){return this.constraint.maxDistance},set:function(e){this.constraint.maxDistance=e}},minZoom:{get:function(){return this.constraint.minZoom},set:function(e){this.constraint.minZoom=e}},maxZoom:{get:function(){return this.constraint.maxZoom},set:function(e){this.constraint.maxZoom=e}},minPolarAngle:{get:function(){return this.constraint.minPolarAngle},set:function(e){this.constraint.minPolarAngle=e}},maxPolarAngle:{get:function(){return this.constraint.maxPolarAngle},set:function(e){this.constraint.maxPolarAngle=e}},minAzimuthAngle:{get:function(){return this.constraint.minAzimuthAngle},set:function(e){this.constraint.minAzimuthAngle=e}},maxAzimuthAngle:{get:function(){return this.constraint.maxAzimuthAngle},set:function(e){this.constraint.maxAzimuthAngle=e}},enableDamping:{get:function(){return this.constraint.enableDamping},set:function(e){this.constraint.enableDamping=e}},dampingFactor:{get:function(){return this.constraint.dampingFactor},set:function(e){this.constraint.dampingFactor=e}},noZoom:{get:function(){return console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),!this.enableZoom},set:function(e){console.warn("THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead."),this.enableZoom=!e}},noRotate:{get:function(){return console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),!this.enableRotate},set:function(e){console.warn("THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead."),this.enableRotate=!e}},noPan:{get:function(){return console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),!this.enablePan},set:function(e){console.warn("THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead."),this.enablePan=!e}},noKeys:{get:function(){return console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),!this.enableKeys},set:function(e){console.warn("THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead."),this.enableKeys=!e}},staticMoving:{get:function(){return console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),!this.constraint.enableDamping},set:function(e){console.warn("THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead."),this.constraint.enableDamping=!e}},dynamicDampingFactor:{get:function(){return console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor},set:function(e){console.warn("THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead."),this.constraint.dampingFactor=e}}}),a}},"./src/css/app.scss":(e,t,n)=>{"use strict";n.r(t)}},e=>{e.O(0,["vendors"],(()=>{return t="./src/js/app.js",e(e.s=t);var t}));e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,